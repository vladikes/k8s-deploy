---
- hosts: microk8s*
  remote_user: ansible
  become: yes
  become_method: sudo
  become_user: root
  gather_facts: yes
  connection: ssh

  tasks:
   - name: Installing Prerequisites for Kubernetes
     apt:
       name:
         - apt-transport-https
         - ca-certificates
         - curl
         - gnupg-agent
         - vim
         - software-properties-common
       state: present

   - name: Add Docker official GPG key
     apt_key:
       url: https://download.docker.com/linux/ubuntu/gpg
       state: present

   - name: Add Docker Repository
     apt_repository:
       repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
       state: present
       filename: docker
       mode: 0600

   - name: Install Docker Engine.
     apt:
       name:
         - docker-ce
         - docker-ce-cli
         - containerd.io
       state: present

   - name: Enable service docker, and enable persistently
     service:
       name: docker
       enabled: yes

   - name: Add Google official GPG key
     apt_key:
       url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
       state: present

   - name: Add Kubernetes Repository
     apt_repository:
       repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
       state: present
       filename: kubernetes
       mode: 0600

   - name: Installing kubectl
     apt:
       name:
         - kubectl
       state: present
   - name: Enable service kubectl, and enable persistently
     service:
       name: kubectl
       enabled: yes

   - name: Install Microk8s master
     hosts: microk8s_MASTER
     gather_facts: yes
     become: yes
     vars:
       microk8s_group_HA: microk8s_*
       microk8s_enable_HA: true
       istio: true
       ingress: true

   - name: Install Microk8s workers
     hosts: microk8s_WORKER
     gather_facts: yes
     become: yes
     vars:
       microk8s_group_WORKERS: microk8s_WORKER
       microk8s_enable_HA: true
       microk8s_group_HA: microk8s_*
       istio: true
       ingress: true

   - name: Create a k8s namespace
     kubernetes.core.k8s:
       name: flask-app
       api_version: v1
       kind: Namespace
       state: present

   - name: fail on validation errors
     kubernetes.core.k8s:
       state: present
       definition: "{{ lookup('template', 'flask-app-deployment.yml') | from_yaml }}"
       validate:
         fail_on_error: yes

   - name: copying file with playbook
     become: true
     copy:
       src: flask-app-deployment.yml
       dest: /home/someuser/app/flask-app-deployment.yml

   - name: Create a Deployment from local file
     kubernetes.core.k8s:
       state: present
       src: /home/someuser/app/flask-app-deployment.yml

   - name: Create configmap using server side apply
     kubernetes.core.k8s:
       namespace: flask-app
       definition:
         apiVersion: v1
         kind: ConfigMap
         metadata:
           name: my-configmap
       apply: yes
       server_side_apply:
         field_manager: ansible

  roles:
    - microk8s-prereq
    - ansible_role_microk8s
    - k9s

